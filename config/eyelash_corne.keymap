#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/eyelash42.h"


#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2
#define KEYS_J JS0 JS1 JS2 JS3 JS4 LEC

// Make sure this file is included before all other files

/*
 * Layer Tap Settings
 */
&lt {
    // Increase layer tap time
    tapping-term-ms = <300>;

    // Quickly tap-tap-holding the lt button will repeat the tap behavior
    // For example enter-enter-hold, will output multiple enter while you
    // keep holding the key.
    // But holding enter without double tapping, will activate the layer.
     quick-tap-ms = <200>;

     flavor = "balanced";
};

/*
 * Caps Word Settings
 */
&caps_word {
    // Allow caps word to continue even when minus or underscore
    // are pressed.
    // Also prevent mod presses from cancelling caps word.
    continue-list = <
      UNDERSCORE MINUS
      LCTRL LALT LGUI LSHFT
      RCTRL RALT RGUI RSHFT
      BACKSPACE
    >;
    #ifdef HAS_UROB
        /delete-property/ ignore-modifiers;
    #endif
};

#ifdef HAS_CAPSLOCK
    &caps_word_capslock {
        disable-on-keys = <
            SPACE TAB ENTER ESCAPE
            COMMA DOT SEMI COLON QUESTION EXCLAMATION
            SLASH BACKSLASH SINGLE_QUOTE DOUBLE_QUOTES GRAVE
            LPAR RPAR LBKT RBKT LBRC RBRC LT GT
        >;
    };
#endif

/ {

    behaviors {

        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp TAB        &kp Q     &kp W                 &kp F             &kp P                  &kp B                                    &kp UP               &kp J           &kp L      &kp U                &kp Y            &kp SEMICOLON        &kp MINUS
&kp GRAVE      &kp A     &hm_l LEFT_CONTROL R  &hm_l LEFT_ALT S  &hm_l LEFT_COMMAND T    &kp G                          &kp LEFT  &kp RET   &kp RIGHT  &kp M           &hm_r RIGHT_COMMAND N      &hm_r RIGHT_ALT E  &hm_r RIGHT_CONTROL I  &mt O  &kp SQT
&kp BACKSLASH  &kp Z               &kp X           &kp C               &kp D         &kp V      &kp C_PLAY_PAUSE              &kp DOWN             &kp K           &kp H      &kp COMMA            &kp PERIOD       &kp SLASH            &kp EQUAL
                                                   &lt 3 CAPS          &lt 2 ESCAPE  &kp SPACE                                                     &sk LEFT_SHIFT  &kp ENTER  &lt 1 BACKSPACE
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "COLEDH";
        };

        numbers {
            bindings = <
&kp TAB    &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                                      &mmv MOVE_UP                     &trans  &trans     &trans         &trans            &kp COLON     &kp PLUS
&kp TILDE  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                           &mmv MOVE_LEFT  &mkp MB1        &mmv MOVE_RIGHT  &trans  &kp RSHFT  &kp RGUI       &kp RALT          &kp RCTRL     &kp DOUBLE_QUOTES
&kp PIPE   &kp N6           &kp N7       &kp N8    &kp N9      &kp N0       &kp K_PLAY_PAUSE                    &mmv MOVE_DOWN                   &trans  &trans     &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION  &kp UNDER
                                         &trans    &trans      &trans                                                                            &trans  &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "NUMBER";
        };

        symbols {
            bindings = <
&kp TAB        &kp EXCLAMATION   &kp AT_SIGN        &kp HASH      &kp DOLLAR      &kp PERCENT                                       &mmv MOVE_UP                     &kp LEFT_BRACKET  &kp LESS_THAN         &kp EQUAL     &kp GREATER_THAN       &kp RIGHT_BRACKET  &kp SLASH
&kp GRAVE      &kp LEFT_CONTROL  &kp LEFT_ALT       &kp LEFT_GUI  &kp LEFT_SHIFT  &kp QUESTION                      &mmv MOVE_LEFT  &mkp MB1        &mmv MOVE_RIGHT  &kp LEFT_BRACE    &kp LEFT_PARENTHESIS  &kp COLON     &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE    &kp MINUS
&kp BACKSLASH  &kp SQT           &kp DOUBLE_QUOTES  &kp CARET     &kp BACKSLASH   &kp TILDE     &kp K_PLAY_PAUSE                    &mmv MOVE_DOWN                   &kp PIPE          &kp AMPERSAND         &kp ASTERISK  &kp PLUS               &kp UNDERSCORE     &kp GRAVE
                                                    &trans        &trans          &trans                                                                             &trans            &trans                &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "SYMBOL";
        };

        function_layer {
            bindings = <
&kp C_FAST_FORWARD  &kp F1  &kp F2   &kp F3   &kp F4   &kp C_VOLUME_UP                      &trans            &mkp LCLK   &mkp MCLK  &mkp RCLK  &mkp MB5   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
&kp C_PLAY_PAUSE    &kp F5  &kp F6   &kp F7   &kp F8   &kp C_VOLUME_DOWN            &trans  &mkp MB4  &trans  &bt BT_NXT  &kp RSHFT  &kp RGUI   &kp RALT   &kp RCTRL             &trans
&kp C_PREVIOUS      &kp F9  &kp F10  &kp F11  &kp F12  &kp K_MUTE         &trans            &trans            &kp LEFT    &kp DOWN   &kp UP     &kp RIGHT  &kp RIGHT             &trans
                                     &trans   &trans   &trans                                                 &trans      &trans     &trans
            >;

            label = "FN";
        };

        gaming_layer {
            bindings = <
&kp TAB    &kp T  &kp Q  &kp W   &kp E      &kp R                                        &kp UP                       &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPD                    &rgb_ug RGB_SPI
&kp LCTRL  &kp I  &kp A  &kp S   &kp D      &kp F                              &kp LEFT  &kt K_PLAY_PAUSE  &kp RIGHT  &rgb_ug RGB_TOG  &kp RSHFT        &kp RGUI         &kp RALT         &kp RCTRL                          &rgb_ug RGB_COLOR_HSB(60,99,50)
&kp LSHFT  &kp B  &kp Z  &kp X   &kp C      &kp V           &rgb_ug RGB_TOG              &kp DOWN                     &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_COLOR_HSB(302,100,50)  &rgb_ug RGB_COLOR_HSB(181,100,50)
                         &kp N1  &kp SPACE  &lt 5 NUMBER_2                                                            &trans           &trans           &trans
            >;

            label = "WASD";
            sensor-bindings = <&rgb_encoder>;
        };

        hotkey_layer {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                              &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp K_PLAY_PAUSE            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                              &trans  &trans  &trans
            >;

            label = "HOT";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
    };
};
